version: "3.9"

services:
  nginx_proxy:
    depends_on:
      frontend:
        condition: service_completed_successfully
      demo_auth_website:
        condition: service_healthy
    build:
      dockerfile: Dockerfile
      context: ./nginx
    volumes:
      - ./client/dist:/usr/share/nginx/html
      - ./images:/usr/share/nginx/images
    ports:
      - "443:443"

  demo_auth_website:
    env_file:
      - api/.env/.env
    build:
      dockerfile: ./Dockerfile
      context: ./api
    volumes:
      - ./api/alembic/versions:/app/alembic/versions
      - ./images:/app/images
    depends_on:
      postgres_daw:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/api/healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_daw:
    image: postgres:16.1-alpine3.19
    restart: always
    env_file:
      - ./api/.env/.database.env
    volumes:
      - ./api/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:4.8.1
    depends_on:
      postgres_daw:
        condition: service_healthy
    environment:
      - ADMINER_DEFAULT_SERVER=postgres_daw
    ports:
      - "8081:8080"
    restart: always

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
    command: npm run build
    volumes:
      - ./client:/app
      - /app/node_modules
